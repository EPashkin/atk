// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use ffi;
use glib;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct Registry(Object<ffi::AtkRegistry, ffi::AtkRegistryClass>);

    match fn {
        get_type => || ffi::atk_registry_get_type(),
    }
}

pub trait RegistryExt {
    //fn get_factory(&self, type_: glib::types::Type) -> /*Ignored*/Option<ObjectFactory>;

    fn get_factory_type(&self, type_: glib::types::Type) -> glib::types::Type;

    fn set_factory_type(&self, type_: glib::types::Type, factory_type: glib::types::Type);
}

impl<O: IsA<Registry>> RegistryExt for O {
    //fn get_factory(&self, type_: glib::types::Type) -> /*Ignored*/Option<ObjectFactory> {
    //    unsafe { TODO: call ffi::atk_registry_get_factory() }
    //}

    fn get_factory_type(&self, type_: glib::types::Type) -> glib::types::Type {
        unsafe {
            from_glib(ffi::atk_registry_get_factory_type(self.to_glib_none().0, type_.to_glib()))
        }
    }

    fn set_factory_type(&self, type_: glib::types::Type, factory_type: glib::types::Type) {
        unsafe {
            ffi::atk_registry_set_factory_type(self.to_glib_none().0, type_.to_glib(), factory_type.to_glib());
        }
    }
}
