// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Object;
use ffi;
#[cfg(any(feature = "v2_2", feature = "dox"))]
use glib;
#[cfg(any(feature = "v2_2", feature = "dox"))]
use glib::object::Downcast;
use glib::object::IsA;
#[cfg(any(feature = "v2_2", feature = "dox"))]
use glib::signal::SignalHandlerId;
#[cfg(any(feature = "v2_2", feature = "dox"))]
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
#[cfg(any(feature = "v2_2", feature = "dox"))]
use std::boxed::Box as Box_;
use std::mem;
#[cfg(any(feature = "v2_2", feature = "dox"))]
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct Window(Object<ffi::AtkWindow, ffi::AtkWindowIface>): Object;

    match fn {
        get_type => || ffi::atk_window_get_type(),
    }
}

pub trait AtkWindowExt {
    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn connect_activate<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn connect_create<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn connect_deactivate<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn connect_destroy<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn connect_maximize<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn connect_minimize<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn connect_move<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn connect_resize<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn connect_restore<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Window> + IsA<glib::object::Object>> AtkWindowExt for O {
    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn connect_activate<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "activate",
                transmute(activate_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn connect_create<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "create",
                transmute(create_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn connect_deactivate<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "deactivate",
                transmute(deactivate_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn connect_destroy<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "destroy",
                transmute(destroy_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn connect_maximize<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "maximize",
                transmute(maximize_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn connect_minimize<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "minimize",
                transmute(minimize_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn connect_move<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "move",
                transmute(move_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn connect_resize<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "resize",
                transmute(resize_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn connect_restore<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "restore",
                transmute(restore_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

#[cfg(any(feature = "v2_2", feature = "dox"))]
unsafe extern "C" fn activate_trampoline<P>(this: *mut ffi::AtkWindow, f: glib_ffi::gpointer)
where P: IsA<Window> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Window::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v2_2", feature = "dox"))]
unsafe extern "C" fn create_trampoline<P>(this: *mut ffi::AtkWindow, f: glib_ffi::gpointer)
where P: IsA<Window> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Window::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v2_2", feature = "dox"))]
unsafe extern "C" fn deactivate_trampoline<P>(this: *mut ffi::AtkWindow, f: glib_ffi::gpointer)
where P: IsA<Window> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Window::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v2_2", feature = "dox"))]
unsafe extern "C" fn destroy_trampoline<P>(this: *mut ffi::AtkWindow, f: glib_ffi::gpointer)
where P: IsA<Window> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Window::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v2_2", feature = "dox"))]
unsafe extern "C" fn maximize_trampoline<P>(this: *mut ffi::AtkWindow, f: glib_ffi::gpointer)
where P: IsA<Window> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Window::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v2_2", feature = "dox"))]
unsafe extern "C" fn minimize_trampoline<P>(this: *mut ffi::AtkWindow, f: glib_ffi::gpointer)
where P: IsA<Window> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Window::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v2_2", feature = "dox"))]
unsafe extern "C" fn move_trampoline<P>(this: *mut ffi::AtkWindow, f: glib_ffi::gpointer)
where P: IsA<Window> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Window::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v2_2", feature = "dox"))]
unsafe extern "C" fn resize_trampoline<P>(this: *mut ffi::AtkWindow, f: glib_ffi::gpointer)
where P: IsA<Window> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Window::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v2_2", feature = "dox"))]
unsafe extern "C" fn restore_trampoline<P>(this: *mut ffi::AtkWindow, f: glib_ffi::gpointer)
where P: IsA<Window> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Window::from_glib_borrow(this).downcast_unchecked())
}
