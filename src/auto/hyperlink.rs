// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Action;
use ffi;
use glib;
use glib::StaticType;
use glib::Value;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct Hyperlink(Object<ffi::AtkHyperlink, ffi::AtkHyperlinkClass>): Action;

    match fn {
        get_type => || ffi::atk_hyperlink_get_type(),
    }
}

pub trait HyperlinkExt {
    fn get_end_index(&self) -> i32;

    fn get_n_anchors(&self) -> i32;

    fn get_start_index(&self) -> i32;

    fn get_uri(&self, i: i32) -> Option<String>;

    fn is_inline(&self) -> bool;

    #[cfg_attr(feature = "v1_8", deprecated)]
    #[cfg(any(feature = "v1_4", feature = "dox"))]
    fn is_selected_link(&self) -> bool;

    fn is_valid(&self) -> bool;

    fn get_property_number_of_anchors(&self) -> i32;

    #[cfg_attr(feature = "v1_8", deprecated)]
    fn get_property_selected_link(&self) -> bool;

    fn connect_link_activated<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_end_index_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_number_of_anchors_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg_attr(feature = "v1_8", deprecated)]
    fn connect_property_selected_link_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_start_index_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Hyperlink> + IsA<glib::object::Object>> HyperlinkExt for O {
    fn get_end_index(&self) -> i32 {
        unsafe {
            ffi::atk_hyperlink_get_end_index(self.to_glib_none().0)
        }
    }

    fn get_n_anchors(&self) -> i32 {
        unsafe {
            ffi::atk_hyperlink_get_n_anchors(self.to_glib_none().0)
        }
    }

    fn get_start_index(&self) -> i32 {
        unsafe {
            ffi::atk_hyperlink_get_start_index(self.to_glib_none().0)
        }
    }

    fn get_uri(&self, i: i32) -> Option<String> {
        unsafe {
            from_glib_full(ffi::atk_hyperlink_get_uri(self.to_glib_none().0, i))
        }
    }

    fn is_inline(&self) -> bool {
        unsafe {
            from_glib(ffi::atk_hyperlink_is_inline(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v1_4", feature = "dox"))]
    fn is_selected_link(&self) -> bool {
        unsafe {
            from_glib(ffi::atk_hyperlink_is_selected_link(self.to_glib_none().0))
        }
    }

    fn is_valid(&self) -> bool {
        unsafe {
            from_glib(ffi::atk_hyperlink_is_valid(self.to_glib_none().0))
        }
    }

    fn get_property_number_of_anchors(&self) -> i32 {
        unsafe {
            let mut value = Value::from_type(<i32 as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "number-of-anchors".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_selected_link(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "selected-link".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn connect_link_activated<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "link-activated",
                transmute(link_activated_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_end_index_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::end-index",
                transmute(notify_end_index_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_number_of_anchors_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::number-of-anchors",
                transmute(notify_number_of_anchors_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_selected_link_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::selected-link",
                transmute(notify_selected_link_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_start_index_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::start-index",
                transmute(notify_start_index_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn link_activated_trampoline<P>(this: *mut ffi::AtkHyperlink, f: glib_ffi::gpointer)
where P: IsA<Hyperlink> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Hyperlink::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_end_index_trampoline<P>(this: *mut ffi::AtkHyperlink, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Hyperlink> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Hyperlink::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_number_of_anchors_trampoline<P>(this: *mut ffi::AtkHyperlink, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Hyperlink> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Hyperlink::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_selected_link_trampoline<P>(this: *mut ffi::AtkHyperlink, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Hyperlink> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Hyperlink::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_start_index_trampoline<P>(this: *mut ffi::AtkHyperlink, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Hyperlink> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Hyperlink::from_glib_borrow(this).downcast_unchecked())
}
